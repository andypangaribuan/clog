//
// Copyright (c) 2024.
// Created by Andy Pangaribuan <https://github.com/apangaribuan>.
//
// This product is protected by copyright and distributed under
// licenses restricting copying, distribution and decompilation.
// All Rights Reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: res/proto/clog.proto

package sclog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// status: enum [ok, !ok]
type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Response) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RequestNoteV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	SvcName      string                  `protobuf:"bytes,4,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion   string                  `protobuf:"bytes,5,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	ExecPath     string                  `protobuf:"bytes,6,opt,name=execPath,proto3" json:"execPath,omitempty"`
	ExecFunction string                  `protobuf:"bytes,7,opt,name=execFunction,proto3" json:"execFunction,omitempty"`
	Key          *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=key,proto3" json:"key,omitempty"`
	SubKey       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=subKey,proto3" json:"subKey,omitempty"`
	Data         string                  `protobuf:"bytes,10,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RequestNoteV1) Reset() {
	*x = RequestNoteV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestNoteV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestNoteV1) ProtoMessage() {}

func (x *RequestNoteV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestNoteV1.ProtoReflect.Descriptor instead.
func (*RequestNoteV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{1}
}

func (x *RequestNoteV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestNoteV1) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RequestNoteV1) GetPartnerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *RequestNoteV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestNoteV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestNoteV1) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *RequestNoteV1) GetExecFunction() string {
	if x != nil {
		return x.ExecFunction
	}
	return ""
}

func (x *RequestNoteV1) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RequestNoteV1) GetSubKey() *wrapperspb.StringValue {
	if x != nil {
		return x.SubKey
	}
	return nil
}

func (x *RequestNoteV1) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// severity   : enum [success, warning, error]
// startedAt  : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
// finishedAt : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
type RequestDbqV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid          string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserId       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	SvcName      string                  `protobuf:"bytes,4,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion   string                  `protobuf:"bytes,5,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	SqlQuery     string                  `protobuf:"bytes,6,opt,name=sqlQuery,proto3" json:"sqlQuery,omitempty"`
	SqlArgs      *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=sqlArgs,proto3" json:"sqlArgs,omitempty"`
	Severity     string                  `protobuf:"bytes,8,opt,name=severity,proto3" json:"severity,omitempty"`
	ExecPath     string                  `protobuf:"bytes,9,opt,name=execPath,proto3" json:"execPath,omitempty"`
	ExecFunction string                  `protobuf:"bytes,10,opt,name=execFunction,proto3" json:"execFunction,omitempty"`
	ErrorMessage *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=errorMessage,proto3" json:"errorMessage,omitempty"`
	StackTrace   *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	Host1        string                  `protobuf:"bytes,13,opt,name=host1,proto3" json:"host1,omitempty"`
	Host2        *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=host2,proto3" json:"host2,omitempty"`
	Duration1    int32                   `protobuf:"varint,15,opt,name=duration1,proto3" json:"duration1,omitempty"`
	Duration2    *wrapperspb.Int32Value  `protobuf:"bytes,16,opt,name=duration2,proto3" json:"duration2,omitempty"`
	StartedAt    string                  `protobuf:"bytes,17,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt   string                  `protobuf:"bytes,18,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
}

func (x *RequestDbqV1) Reset() {
	*x = RequestDbqV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestDbqV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestDbqV1) ProtoMessage() {}

func (x *RequestDbqV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestDbqV1.ProtoReflect.Descriptor instead.
func (*RequestDbqV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{2}
}

func (x *RequestDbqV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestDbqV1) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RequestDbqV1) GetPartnerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *RequestDbqV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestDbqV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestDbqV1) GetSqlQuery() string {
	if x != nil {
		return x.SqlQuery
	}
	return ""
}

func (x *RequestDbqV1) GetSqlArgs() *wrapperspb.StringValue {
	if x != nil {
		return x.SqlArgs
	}
	return nil
}

func (x *RequestDbqV1) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RequestDbqV1) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *RequestDbqV1) GetExecFunction() string {
	if x != nil {
		return x.ExecFunction
	}
	return ""
}

func (x *RequestDbqV1) GetErrorMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *RequestDbqV1) GetStackTrace() *wrapperspb.StringValue {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *RequestDbqV1) GetHost1() string {
	if x != nil {
		return x.Host1
	}
	return ""
}

func (x *RequestDbqV1) GetHost2() *wrapperspb.StringValue {
	if x != nil {
		return x.Host2
	}
	return nil
}

func (x *RequestDbqV1) GetDuration1() int32 {
	if x != nil {
		return x.Duration1
	}
	return 0
}

func (x *RequestDbqV1) GetDuration2() *wrapperspb.Int32Value {
	if x != nil {
		return x.Duration2
	}
	return nil
}

func (x *RequestDbqV1) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *RequestDbqV1) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

// startedAt  : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
// finishedAt : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
type RequestHttpCallV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid        string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserId     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	SvcName    string                  `protobuf:"bytes,4,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion string                  `protobuf:"bytes,5,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	Url        string                  `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	Severity   string                  `protobuf:"bytes,7,opt,name=severity,proto3" json:"severity,omitempty"`
	ReqHeader  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reqHeader,proto3" json:"reqHeader,omitempty"`
	ReqParam   *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=reqParam,proto3" json:"reqParam,omitempty"`
	ReqQuery   *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=reqQuery,proto3" json:"reqQuery,omitempty"`
	ReqForm    *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=reqForm,proto3" json:"reqForm,omitempty"`
	ReqFiles   *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=reqFiles,proto3" json:"reqFiles,omitempty"`
	ReqBody    *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=reqBody,proto3" json:"reqBody,omitempty"`
	ResData    *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=resData,proto3" json:"resData,omitempty"`
	ResCode    int32                   `protobuf:"varint,15,opt,name=resCode,proto3" json:"resCode,omitempty"`
	ErrMessage *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=errMessage,proto3" json:"errMessage,omitempty"`
	StackTrace *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	StartedAt  string                  `protobuf:"bytes,18,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt string                  `protobuf:"bytes,19,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
}

func (x *RequestHttpCallV1) Reset() {
	*x = RequestHttpCallV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHttpCallV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHttpCallV1) ProtoMessage() {}

func (x *RequestHttpCallV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHttpCallV1.ProtoReflect.Descriptor instead.
func (*RequestHttpCallV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{3}
}

func (x *RequestHttpCallV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestHttpCallV1) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RequestHttpCallV1) GetPartnerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *RequestHttpCallV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestHttpCallV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestHttpCallV1) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestHttpCallV1) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RequestHttpCallV1) GetReqHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqHeader
	}
	return nil
}

func (x *RequestHttpCallV1) GetReqParam() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqParam
	}
	return nil
}

func (x *RequestHttpCallV1) GetReqQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqQuery
	}
	return nil
}

func (x *RequestHttpCallV1) GetReqForm() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqForm
	}
	return nil
}

func (x *RequestHttpCallV1) GetReqFiles() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqFiles
	}
	return nil
}

func (x *RequestHttpCallV1) GetReqBody() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqBody
	}
	return nil
}

func (x *RequestHttpCallV1) GetResData() *wrapperspb.StringValue {
	if x != nil {
		return x.ResData
	}
	return nil
}

func (x *RequestHttpCallV1) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *RequestHttpCallV1) GetErrMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrMessage
	}
	return nil
}

func (x *RequestHttpCallV1) GetStackTrace() *wrapperspb.StringValue {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *RequestHttpCallV1) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *RequestHttpCallV1) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

// startedAt : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
type RequestServicePieceV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	SvcName          string                  `protobuf:"bytes,2,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion       string                  `protobuf:"bytes,3,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	SvcParentName    *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=svcParentName,proto3" json:"svcParentName,omitempty"`
	SvcParentVersion *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=svcParentVersion,proto3" json:"svcParentVersion,omitempty"`
	Endpoint         string                  `protobuf:"bytes,6,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Url              string                  `protobuf:"bytes,7,opt,name=url,proto3" json:"url,omitempty"`
	ReqVersion       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=reqVersion,proto3" json:"reqVersion,omitempty"`
	ReqSource        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=reqSource,proto3" json:"reqSource,omitempty"`
	ReqHeader        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=reqHeader,proto3" json:"reqHeader,omitempty"`
	ReqParam         *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=reqParam,proto3" json:"reqParam,omitempty"`
	ReqQuery         *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=reqQuery,proto3" json:"reqQuery,omitempty"`
	ReqForm          *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=reqForm,proto3" json:"reqForm,omitempty"`
	ReqBody          *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=reqBody,proto3" json:"reqBody,omitempty"`
	ClientIp         string                  `protobuf:"bytes,15,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	StartedAt        string                  `protobuf:"bytes,16,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
}

func (x *RequestServicePieceV1) Reset() {
	*x = RequestServicePieceV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestServicePieceV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestServicePieceV1) ProtoMessage() {}

func (x *RequestServicePieceV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestServicePieceV1.ProtoReflect.Descriptor instead.
func (*RequestServicePieceV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{4}
}

func (x *RequestServicePieceV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestServicePieceV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestServicePieceV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestServicePieceV1) GetSvcParentName() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentName
	}
	return nil
}

func (x *RequestServicePieceV1) GetSvcParentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentVersion
	}
	return nil
}

func (x *RequestServicePieceV1) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RequestServicePieceV1) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestServicePieceV1) GetReqVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqVersion
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqSource() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqSource
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqHeader
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqParam() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqParam
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqQuery
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqForm() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqForm
	}
	return nil
}

func (x *RequestServicePieceV1) GetReqBody() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqBody
	}
	return nil
}

func (x *RequestServicePieceV1) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RequestServicePieceV1) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

// severity   : server (1xx & 3xx), success (2xx), warning (4xx), error (5xx)
// startedAt  : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
// finishedAt : format "yyyy-MM-dd HH:mm:ss.SSSSSS TZ"
type RequestServiceV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserId           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	SvcName          string                  `protobuf:"bytes,4,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion       string                  `protobuf:"bytes,5,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	SvcParentName    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=svcParentName,proto3" json:"svcParentName,omitempty"`
	SvcParentVersion *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=svcParentVersion,proto3" json:"svcParentVersion,omitempty"`
	Endpoint         string                  `protobuf:"bytes,8,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Url              string                  `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Severity         string                  `protobuf:"bytes,10,opt,name=severity,proto3" json:"severity,omitempty"`
	ExecPath         string                  `protobuf:"bytes,11,opt,name=execPath,proto3" json:"execPath,omitempty"`
	ExecFunction     string                  `protobuf:"bytes,12,opt,name=execFunction,proto3" json:"execFunction,omitempty"`
	ReqVersion       *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=reqVersion,proto3" json:"reqVersion,omitempty"`
	ReqSource        *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=reqSource,proto3" json:"reqSource,omitempty"`
	ReqHeader        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=reqHeader,proto3" json:"reqHeader,omitempty"`
	ReqParam         *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=reqParam,proto3" json:"reqParam,omitempty"`
	ReqQuery         *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=reqQuery,proto3" json:"reqQuery,omitempty"`
	ReqForm          *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=reqForm,proto3" json:"reqForm,omitempty"`
	ReqFiles         *wrapperspb.StringValue `protobuf:"bytes,19,opt,name=reqFiles,proto3" json:"reqFiles,omitempty"`
	ReqBody          *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=reqBody,proto3" json:"reqBody,omitempty"`
	ResData          *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=resData,proto3" json:"resData,omitempty"`
	ResCode          int32                   `protobuf:"varint,22,opt,name=resCode,proto3" json:"resCode,omitempty"`
	ResSubCode       string                  `protobuf:"bytes,23,opt,name=resSubCode,proto3" json:"resSubCode,omitempty"`
	ErrMessage       *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=errMessage,proto3" json:"errMessage,omitempty"`
	StackTrace       *wrapperspb.StringValue `protobuf:"bytes,25,opt,name=stackTrace,proto3" json:"stackTrace,omitempty"`
	ClientIp         string                  `protobuf:"bytes,26,opt,name=clientIp,proto3" json:"clientIp,omitempty"`
	StartedAt        string                  `protobuf:"bytes,27,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt       string                  `protobuf:"bytes,28,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
}

func (x *RequestServiceV1) Reset() {
	*x = RequestServiceV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestServiceV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestServiceV1) ProtoMessage() {}

func (x *RequestServiceV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestServiceV1.ProtoReflect.Descriptor instead.
func (*RequestServiceV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{5}
}

func (x *RequestServiceV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestServiceV1) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RequestServiceV1) GetPartnerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *RequestServiceV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestServiceV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestServiceV1) GetSvcParentName() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentName
	}
	return nil
}

func (x *RequestServiceV1) GetSvcParentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentVersion
	}
	return nil
}

func (x *RequestServiceV1) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RequestServiceV1) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RequestServiceV1) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RequestServiceV1) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *RequestServiceV1) GetExecFunction() string {
	if x != nil {
		return x.ExecFunction
	}
	return ""
}

func (x *RequestServiceV1) GetReqVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqVersion
	}
	return nil
}

func (x *RequestServiceV1) GetReqSource() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqSource
	}
	return nil
}

func (x *RequestServiceV1) GetReqHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqHeader
	}
	return nil
}

func (x *RequestServiceV1) GetReqParam() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqParam
	}
	return nil
}

func (x *RequestServiceV1) GetReqQuery() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqQuery
	}
	return nil
}

func (x *RequestServiceV1) GetReqForm() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqForm
	}
	return nil
}

func (x *RequestServiceV1) GetReqFiles() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqFiles
	}
	return nil
}

func (x *RequestServiceV1) GetReqBody() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqBody
	}
	return nil
}

func (x *RequestServiceV1) GetResData() *wrapperspb.StringValue {
	if x != nil {
		return x.ResData
	}
	return nil
}

func (x *RequestServiceV1) GetResCode() int32 {
	if x != nil {
		return x.ResCode
	}
	return 0
}

func (x *RequestServiceV1) GetResSubCode() string {
	if x != nil {
		return x.ResSubCode
	}
	return ""
}

func (x *RequestServiceV1) GetErrMessage() *wrapperspb.StringValue {
	if x != nil {
		return x.ErrMessage
	}
	return nil
}

func (x *RequestServiceV1) GetStackTrace() *wrapperspb.StringValue {
	if x != nil {
		return x.StackTrace
	}
	return nil
}

func (x *RequestServiceV1) GetClientIp() string {
	if x != nil {
		return x.ClientIp
	}
	return ""
}

func (x *RequestServiceV1) GetStartedAt() string {
	if x != nil {
		return x.StartedAt
	}
	return ""
}

func (x *RequestServiceV1) GetFinishedAt() string {
	if x != nil {
		return x.FinishedAt
	}
	return ""
}

// severity : info, warning, error
type RequestGrpcV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uid              string                  `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	UserId           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PartnerId        *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=partnerId,proto3" json:"partnerId,omitempty"`
	SvcName          string                  `protobuf:"bytes,4,opt,name=svcName,proto3" json:"svcName,omitempty"`
	SvcVersion       string                  `protobuf:"bytes,5,opt,name=svcVersion,proto3" json:"svcVersion,omitempty"`
	SvcParentName    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=svcParentName,proto3" json:"svcParentName,omitempty"`
	SvcParentVersion *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=svcParentVersion,proto3" json:"svcParentVersion,omitempty"`
	Destination      string                  `protobuf:"bytes,8,opt,name=destination,proto3" json:"destination,omitempty"`
	Severity         string                  `protobuf:"bytes,9,opt,name=severity,proto3" json:"severity,omitempty"`
	ExecPath         string                  `protobuf:"bytes,10,opt,name=execPath,proto3" json:"execPath,omitempty"`
	ExecFunction     string                  `protobuf:"bytes,11,opt,name=execFunction,proto3" json:"execFunction,omitempty"`
	ReqHeader        *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=reqHeader,proto3" json:"reqHeader,omitempty"`
	Data             *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RequestGrpcV1) Reset() {
	*x = RequestGrpcV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_res_proto_clog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGrpcV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGrpcV1) ProtoMessage() {}

func (x *RequestGrpcV1) ProtoReflect() protoreflect.Message {
	mi := &file_res_proto_clog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGrpcV1.ProtoReflect.Descriptor instead.
func (*RequestGrpcV1) Descriptor() ([]byte, []int) {
	return file_res_proto_clog_proto_rawDescGZIP(), []int{6}
}

func (x *RequestGrpcV1) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *RequestGrpcV1) GetUserId() *wrapperspb.StringValue {
	if x != nil {
		return x.UserId
	}
	return nil
}

func (x *RequestGrpcV1) GetPartnerId() *wrapperspb.StringValue {
	if x != nil {
		return x.PartnerId
	}
	return nil
}

func (x *RequestGrpcV1) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *RequestGrpcV1) GetSvcVersion() string {
	if x != nil {
		return x.SvcVersion
	}
	return ""
}

func (x *RequestGrpcV1) GetSvcParentName() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentName
	}
	return nil
}

func (x *RequestGrpcV1) GetSvcParentVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.SvcParentVersion
	}
	return nil
}

func (x *RequestGrpcV1) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

func (x *RequestGrpcV1) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

func (x *RequestGrpcV1) GetExecPath() string {
	if x != nil {
		return x.ExecPath
	}
	return ""
}

func (x *RequestGrpcV1) GetExecFunction() string {
	if x != nil {
		return x.ExecFunction
	}
	return ""
}

func (x *RequestGrpcV1) GetReqHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.ReqHeader
	}
	return nil
}

func (x *RequestGrpcV1) GetData() *wrapperspb.StringValue {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_res_proto_clog_proto protoreflect.FileDescriptor

var file_res_proto_clog_proto_rawDesc = []byte{
	0x0a, 0x14, 0x72, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x6f, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a,
	0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x87, 0x03, 0x0a, 0x0d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x56, 0x31, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65,
	0x78, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x73,
	0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x75, 0x62, 0x4b, 0x65,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x05, 0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x62, 0x71, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76,
	0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x36, 0x0a, 0x07, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x31, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x31, 0x12, 0x32, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x32, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x12, 0x39, 0x0a, 0x09,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe5, 0x06, 0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x74, 0x74, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x38, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x46, 0x6f,
	0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x42, 0x6f, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf3, 0x05,
	0x0a, 0x15, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x69, 0x65, 0x63, 0x65, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x63,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x76, 0x63, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x3c, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x09, 0x72, 0x65, 0x71, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x46, 0x6f, 0x72, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x46, 0x6f, 0x72,
	0x6d, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0x84, 0x0a, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76, 0x63, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x76, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x76, 0x63,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x10, 0x73, 0x76,
	0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78,
	0x65, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x72, 0x65, 0x71, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x71, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x38,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x46,
	0x6f, 0x72, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x46, 0x6f, 0x72, 0x6d,
	0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x72, 0x65, 0x71, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x53, 0x75, 0x62, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x53, 0x75, 0x62,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc7, 0x04, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x70, 0x63, 0x56, 0x31, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x76,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x76, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x76,
	0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x48,
	0x0a, 0x10, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x76, 0x63, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x65, 0x63, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x65, 0x63, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x32, 0xcd, 0x02, 0x0a, 0x0b, 0x43, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73,
	0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x56, 0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x44, 0x62, 0x71, 0x56, 0x31, 0x12, 0x13, 0x2e, 0x73,
	0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x62, 0x71, 0x56,
	0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x48, 0x74, 0x74, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x31,
	0x12, 0x18, 0x2e, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x74, 0x74, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x56, 0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x6c,
	0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x56, 0x31, 0x12, 0x1c, 0x2e,
	0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x69, 0x65, 0x63, 0x65, 0x56, 0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63,
	0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x31, 0x12, 0x17, 0x2e, 0x73, 0x63, 0x6c, 0x6f,
	0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x56, 0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x47, 0x72, 0x70, 0x63, 0x56, 0x31, 0x12, 0x14, 0x2e,
	0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x70,
	0x63, 0x56, 0x31, 0x1a, 0x0f, 0x2e, 0x73, 0x63, 0x6c, 0x6f, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1b, 0x5a, 0x19, 0x72, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x73, 0x63, 0x6c, 0x6f,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_res_proto_clog_proto_rawDescOnce sync.Once
	file_res_proto_clog_proto_rawDescData = file_res_proto_clog_proto_rawDesc
)

func file_res_proto_clog_proto_rawDescGZIP() []byte {
	file_res_proto_clog_proto_rawDescOnce.Do(func() {
		file_res_proto_clog_proto_rawDescData = protoimpl.X.CompressGZIP(file_res_proto_clog_proto_rawDescData)
	})
	return file_res_proto_clog_proto_rawDescData
}

var file_res_proto_clog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_res_proto_clog_proto_goTypes = []interface{}{
	(*Response)(nil),               // 0: sclog.Response
	(*RequestNoteV1)(nil),          // 1: sclog.RequestNoteV1
	(*RequestDbqV1)(nil),           // 2: sclog.RequestDbqV1
	(*RequestHttpCallV1)(nil),      // 3: sclog.RequestHttpCallV1
	(*RequestServicePieceV1)(nil),  // 4: sclog.RequestServicePieceV1
	(*RequestServiceV1)(nil),       // 5: sclog.RequestServiceV1
	(*RequestGrpcV1)(nil),          // 6: sclog.RequestGrpcV1
	(*wrapperspb.StringValue)(nil), // 7: google.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),  // 8: google.protobuf.Int32Value
}
var file_res_proto_clog_proto_depIdxs = []int32{
	7,  // 0: sclog.RequestNoteV1.userId:type_name -> google.protobuf.StringValue
	7,  // 1: sclog.RequestNoteV1.partnerId:type_name -> google.protobuf.StringValue
	7,  // 2: sclog.RequestNoteV1.key:type_name -> google.protobuf.StringValue
	7,  // 3: sclog.RequestNoteV1.subKey:type_name -> google.protobuf.StringValue
	7,  // 4: sclog.RequestDbqV1.userId:type_name -> google.protobuf.StringValue
	7,  // 5: sclog.RequestDbqV1.partnerId:type_name -> google.protobuf.StringValue
	7,  // 6: sclog.RequestDbqV1.sqlArgs:type_name -> google.protobuf.StringValue
	7,  // 7: sclog.RequestDbqV1.errorMessage:type_name -> google.protobuf.StringValue
	7,  // 8: sclog.RequestDbqV1.stackTrace:type_name -> google.protobuf.StringValue
	7,  // 9: sclog.RequestDbqV1.host2:type_name -> google.protobuf.StringValue
	8,  // 10: sclog.RequestDbqV1.duration2:type_name -> google.protobuf.Int32Value
	7,  // 11: sclog.RequestHttpCallV1.userId:type_name -> google.protobuf.StringValue
	7,  // 12: sclog.RequestHttpCallV1.partnerId:type_name -> google.protobuf.StringValue
	7,  // 13: sclog.RequestHttpCallV1.reqHeader:type_name -> google.protobuf.StringValue
	7,  // 14: sclog.RequestHttpCallV1.reqParam:type_name -> google.protobuf.StringValue
	7,  // 15: sclog.RequestHttpCallV1.reqQuery:type_name -> google.protobuf.StringValue
	7,  // 16: sclog.RequestHttpCallV1.reqForm:type_name -> google.protobuf.StringValue
	7,  // 17: sclog.RequestHttpCallV1.reqFiles:type_name -> google.protobuf.StringValue
	7,  // 18: sclog.RequestHttpCallV1.reqBody:type_name -> google.protobuf.StringValue
	7,  // 19: sclog.RequestHttpCallV1.resData:type_name -> google.protobuf.StringValue
	7,  // 20: sclog.RequestHttpCallV1.errMessage:type_name -> google.protobuf.StringValue
	7,  // 21: sclog.RequestHttpCallV1.stackTrace:type_name -> google.protobuf.StringValue
	7,  // 22: sclog.RequestServicePieceV1.svcParentName:type_name -> google.protobuf.StringValue
	7,  // 23: sclog.RequestServicePieceV1.svcParentVersion:type_name -> google.protobuf.StringValue
	7,  // 24: sclog.RequestServicePieceV1.reqVersion:type_name -> google.protobuf.StringValue
	7,  // 25: sclog.RequestServicePieceV1.reqSource:type_name -> google.protobuf.StringValue
	7,  // 26: sclog.RequestServicePieceV1.reqHeader:type_name -> google.protobuf.StringValue
	7,  // 27: sclog.RequestServicePieceV1.reqParam:type_name -> google.protobuf.StringValue
	7,  // 28: sclog.RequestServicePieceV1.reqQuery:type_name -> google.protobuf.StringValue
	7,  // 29: sclog.RequestServicePieceV1.reqForm:type_name -> google.protobuf.StringValue
	7,  // 30: sclog.RequestServicePieceV1.reqBody:type_name -> google.protobuf.StringValue
	7,  // 31: sclog.RequestServiceV1.userId:type_name -> google.protobuf.StringValue
	7,  // 32: sclog.RequestServiceV1.partnerId:type_name -> google.protobuf.StringValue
	7,  // 33: sclog.RequestServiceV1.svcParentName:type_name -> google.protobuf.StringValue
	7,  // 34: sclog.RequestServiceV1.svcParentVersion:type_name -> google.protobuf.StringValue
	7,  // 35: sclog.RequestServiceV1.reqVersion:type_name -> google.protobuf.StringValue
	7,  // 36: sclog.RequestServiceV1.reqSource:type_name -> google.protobuf.StringValue
	7,  // 37: sclog.RequestServiceV1.reqHeader:type_name -> google.protobuf.StringValue
	7,  // 38: sclog.RequestServiceV1.reqParam:type_name -> google.protobuf.StringValue
	7,  // 39: sclog.RequestServiceV1.reqQuery:type_name -> google.protobuf.StringValue
	7,  // 40: sclog.RequestServiceV1.reqForm:type_name -> google.protobuf.StringValue
	7,  // 41: sclog.RequestServiceV1.reqFiles:type_name -> google.protobuf.StringValue
	7,  // 42: sclog.RequestServiceV1.reqBody:type_name -> google.protobuf.StringValue
	7,  // 43: sclog.RequestServiceV1.resData:type_name -> google.protobuf.StringValue
	7,  // 44: sclog.RequestServiceV1.errMessage:type_name -> google.protobuf.StringValue
	7,  // 45: sclog.RequestServiceV1.stackTrace:type_name -> google.protobuf.StringValue
	7,  // 46: sclog.RequestGrpcV1.userId:type_name -> google.protobuf.StringValue
	7,  // 47: sclog.RequestGrpcV1.partnerId:type_name -> google.protobuf.StringValue
	7,  // 48: sclog.RequestGrpcV1.svcParentName:type_name -> google.protobuf.StringValue
	7,  // 49: sclog.RequestGrpcV1.svcParentVersion:type_name -> google.protobuf.StringValue
	7,  // 50: sclog.RequestGrpcV1.reqHeader:type_name -> google.protobuf.StringValue
	7,  // 51: sclog.RequestGrpcV1.data:type_name -> google.protobuf.StringValue
	1,  // 52: sclog.CLogService.Note:input_type -> sclog.RequestNoteV1
	2,  // 53: sclog.CLogService.DbqV1:input_type -> sclog.RequestDbqV1
	3,  // 54: sclog.CLogService.HttpCallV1:input_type -> sclog.RequestHttpCallV1
	4,  // 55: sclog.CLogService.ServicePieceV1:input_type -> sclog.RequestServicePieceV1
	5,  // 56: sclog.CLogService.ServiceV1:input_type -> sclog.RequestServiceV1
	6,  // 57: sclog.CLogService.GrpcV1:input_type -> sclog.RequestGrpcV1
	0,  // 58: sclog.CLogService.Note:output_type -> sclog.Response
	0,  // 59: sclog.CLogService.DbqV1:output_type -> sclog.Response
	0,  // 60: sclog.CLogService.HttpCallV1:output_type -> sclog.Response
	0,  // 61: sclog.CLogService.ServicePieceV1:output_type -> sclog.Response
	0,  // 62: sclog.CLogService.ServiceV1:output_type -> sclog.Response
	0,  // 63: sclog.CLogService.GrpcV1:output_type -> sclog.Response
	58, // [58:64] is the sub-list for method output_type
	52, // [52:58] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_res_proto_clog_proto_init() }
func file_res_proto_clog_proto_init() {
	if File_res_proto_clog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_res_proto_clog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestNoteV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestDbqV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHttpCallV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestServicePieceV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestServiceV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_res_proto_clog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGrpcV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_res_proto_clog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_res_proto_clog_proto_goTypes,
		DependencyIndexes: file_res_proto_clog_proto_depIdxs,
		MessageInfos:      file_res_proto_clog_proto_msgTypes,
	}.Build()
	File_res_proto_clog_proto = out.File
	file_res_proto_clog_proto_rawDesc = nil
	file_res_proto_clog_proto_goTypes = nil
	file_res_proto_clog_proto_depIdxs = nil
}
