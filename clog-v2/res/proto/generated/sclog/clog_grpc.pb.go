//
// Copyright (c) 2024.
// Created by Andy Pangaribuan <https://github.com/apangaribuan>.
//
// This product is protected by copyright and distributed under
// licenses restricting copying, distribution and decompilation.
// All Rights Reserved.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: res/proto/clog.proto

package sclog

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CLogService_InfoLogV1_FullMethodName = "/sclog.CLogService/InfoLogV1"
)

// CLogServiceClient is the client API for CLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CLogServiceClient interface {
	InfoLogV1(ctx context.Context, in *RequestInfoLogV1, opts ...grpc.CallOption) (*Response, error)
}

type cLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCLogServiceClient(cc grpc.ClientConnInterface) CLogServiceClient {
	return &cLogServiceClient{cc}
}

func (c *cLogServiceClient) InfoLogV1(ctx context.Context, in *RequestInfoLogV1, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, CLogService_InfoLogV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CLogServiceServer is the server API for CLogService service.
// All implementations must embed UnimplementedCLogServiceServer
// for forward compatibility
type CLogServiceServer interface {
	InfoLogV1(context.Context, *RequestInfoLogV1) (*Response, error)
	mustEmbedUnimplementedCLogServiceServer()
}

// UnimplementedCLogServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCLogServiceServer struct {
}

func (UnimplementedCLogServiceServer) InfoLogV1(context.Context, *RequestInfoLogV1) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoLogV1 not implemented")
}
func (UnimplementedCLogServiceServer) mustEmbedUnimplementedCLogServiceServer() {}

// UnsafeCLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CLogServiceServer will
// result in compilation errors.
type UnsafeCLogServiceServer interface {
	mustEmbedUnimplementedCLogServiceServer()
}

func RegisterCLogServiceServer(s grpc.ServiceRegistrar, srv CLogServiceServer) {
	s.RegisterService(&CLogService_ServiceDesc, srv)
}

func _CLogService_InfoLogV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInfoLogV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CLogServiceServer).InfoLogV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CLogService_InfoLogV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CLogServiceServer).InfoLogV1(ctx, req.(*RequestInfoLogV1))
	}
	return interceptor(ctx, in, info, handler)
}

// CLogService_ServiceDesc is the grpc.ServiceDesc for CLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sclog.CLogService",
	HandlerType: (*CLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoLogV1",
			Handler:    _CLogService_InfoLogV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "res/proto/clog.proto",
}
